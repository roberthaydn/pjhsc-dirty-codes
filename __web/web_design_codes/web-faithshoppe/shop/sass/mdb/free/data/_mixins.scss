/*********************
  Mixins
**********************/

@mixin hover {
    @if $enable-hover-media-query {
        // See Media Queries Level 4: http://drafts.csswg.org/mediaqueries/#hover
        // Currently shimmed by https://github.com/twbs/mq4-hover-shim
        @media (hover: hover) {
            &:hover {
                @content
            }
        }
    }
    @else {
        &:hover {
            @content
        }
    }
}

@mixin hover-focus {
    @if $enable-hover-media-query {
        &:focus {
            @content
        }
        @include hover {
            @content
        }
    }
    @else {
        &:focus,
        &:hover {
            @content
        }
    }
}

@mixin plain-hover-focus {
    @if $enable-hover-media-query {
        &,
        &:focus {
            @content
        }
        @include hover {
            @content
        }
    }
    @else {
        &,
        &:focus,
        &:hover {
            @content
        }
    }
}

@mixin hover-focus-active {
    @if $enable-hover-media-query {
        &:focus,
        &:active {
            @content
        }
        @include hover {
            @content
        }
    }
    @else {
        &:focus,
        &:active,
        &:hover {
            @content
        }
    }
}

@mixin border-radius($args) {
    -webkit-border-radius: $args;
    -moz-border-radius: $args;
    -ms-border-radius: $args;
    -o-border-radius: $args;
    border-radius: $args;
}

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content
    }
    &:-moz-placeholder {
        @content
    }
    &::-moz-placeholder {
        @content
    }
    &::-ms-placeholder {
        @content
    }
    &::placeholder {
        @content
    }
}

// New mixins
@mixin make-button($name, $color) {
    .btn-#{$name} {
        background-color: $color;
        &:hover,
        &:focus,
        &:active,
        &.active {
            background-color: lighten($color, 5%) !important;
        }
        &.dropdown-toggle {
            background-color: $color!important;
            &:hover,
            &:focus {
                background-color: lighten($color, 5%) !important;
            }
        }
    }
}

@mixin make-outline-button($name, $color) {
    .btn-outline-#{$name} {
        border: 2px solid $color;
        color: $color !important;
        background-color: transparent;
        &:hover,
        &:focus,
        &:active,
        &:active:focus,
        &.active {
            background-color: transparent;
            color: $color;
            border-color: $color;
        }
    }
}

@mixin make-gradient-button($name, $value) {
    .btn.#{$name}-gradient {
        background: linear-gradient(40deg, map-get($value, start), map-get($value, end));
        transition:.5s ease;
        &:hover,
        &:focus,
        &:active,
        &:active:focus
        &.active {
            background: linear-gradient(40deg, lighten(map-get($value, start), 5%), lighten(map-get($value, end), 5%));
        }
    }
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
    padding: $padding-y $padding-x;
    font-size: $font-size;
    line-height: $line-height;
    @include border-radius($border-radius);
}


@mixin transition($transition...) {
    @if $enable-transitions {
        @if length($transition) == 0 {
            transition: $transition-base;
        } @else {
            transition: $transition;
        }
    }
}

@mixin transform($args) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -ms-transform: $args;
    -o-transform: $args;
    transform: $args;
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

// Flexbox
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}
    @mixin flex($values) {
      -webkit-box-flex: $values;
      -moz-box-flex:  $values;
      -webkit-flex:  $values;
      -ms-flex:  $values;
      flex:  $values;
    }
    @mixin order($val) {
      -webkit-box-ordinal-group: $val;
      -moz-box-ordinal-group: $val;
      -ms-flex-order: $val;
      -webkit-order: $val;
      order: $val;
    }
    @mixin align($align) {
      -webkit-flex-align: $align;
      -ms-flex-align: $align;
      -webkit-align-items: $align;
      align-items: $align;
    }
    @mixin justify-content($val) {
      -webkit-justify-content: $val;
      justify-content: $val;
    }
    
    /*********************/
    /*** CUSTOM MIXINS ***/
    /*********************/
    //Border-radius
    @mixin add-border-radius($radius) {
        -moz-border-radius:$radius !important;
     -webkit-border-radius:$radius !important;
         -ms-border-radius:$radius !important;
          -o-border-radius:$radius !important;
             border-radius:$radius !important;
    }

    //Border(solid)
    @mixin add-border($size, $color, $position) {
        @if $position == 'all' {
            border:$size solid $color;
        } @else if $position == 'top' {
            border-top:$size solid $color;
        } @else if $position == 'bottom' {
            border-bottom:$size solid $color;
        } @else if $position == 'right' {
            border-right:$size solid $color;
        } @else if $position == 'left' {
            border-left:$size solid $color;
        } @else if $position == 'top-bottom' {
            border-top:$size solid $color;
            border-bottom:$size solid $color;
        } @else if $position == 'right-left' {
            border-right:$size solid $color;
            border-left:$size solid $color;
        }
    }

    //Border(solid)
    @mixin add-margin($set, $position) {
        @if $position == 'top' {
            margin-top:$set;
        } @else if $position == 'left' {
            margin-left:$set;
        } @else if $position == 'bottom' {
            margin-bottom:$set;
        } @else if $position == 'right' {
            margin-right:$set;
        } @else if $position == 'all' {
            margin:$set;
        }
    }

    //Border(solid)
    @mixin add-padding($set, $position) {
        @if $position == 'top' {
            padding-top:$set;
        } @else if $position == 'left' {
            padding-left:$set;
        } @else if $position == 'bottom' {
            padding-bottom:$set;
        } @else if $position == 'right' {
            padding-right:$set;
        } @else if $position == 'all' {
            padding:$set;
        }
    }

    //Background-color
    @mixin add-background-color($color) {
        background-color:$color;
        color:#fff;
    }

    //material design
    @mixin add-material() {
            box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
            transition: all 0.3s cubic-bezier(.25,.8,.25,1);    
    }
